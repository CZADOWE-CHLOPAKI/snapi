# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "main" branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: Deploy to Amazon ECS

on:
  push:
    branches: [ "main" ]


permissions:
  contents: read

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  ECR_REGISTRY: ${{ vars.ECR_REGISTRY }}
  ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
  ECS_CLUSTER: ${{ vars.ECS_CLUSTER }}
  ECS_SERVICE: ${{ vars.ECS_SERVICE }}
  ECS_BACKEND_TASK_DEFINITION: ${{ secrets.BACKEND_TASK_DEFINITION }}


jobs:
  push-backend-image:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-central-1  # does not work with env for some reason https://github.com/aws-actions/configure-aws-credentials/issues/402

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
        ECR_REGISTRY: ${{ vars.ECR_REGISTRY }}
        ECR_IMAGE_TAG: ${{ github.sha }}
      run: |
        cd backend
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$ECR_IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$ECR_IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$ECR_IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Update ECS task definition
      id: task-def
      run: |
        NEW_IMAGE_URI=$ECR_REGISTRY/$ECR_REPOSITORY:$(date +%Y%m%d%H%M%S)
        echo "Fetching existing task definition..."
        EXISTING_TASK_DEF=$(aws ecs describe-task-definition --task-definition $ECS_TASK_DEFINITION)
        echo "Updating task definition with new image URI..."
        NEW_TASK_DEF=$(echo $EXISTING_TASK_DEF | jq --arg IMAGE_URI "$NEW_IMAGE_URI" '.taskDefinition.containerDefinitions[0].image = $IMAGE_URI')
        NEW_TASK_DEF=$(echo $NEW_TASK_DEF | jq '.taskDefinition | {family, containerDefinitions, volumes, taskRoleArn, executionRoleArn, networkMode, placementConstraints, requiresCompatibilities, cpu, memory}')
        echo $NEW_TASK_DEF > new_task_def.json
        aws ecs register-task-definition --cli-input-json file://new_task_def.json
        TASK_DEF_ARN=$(aws ecs describe-task-definition --task-definition $ECS_TASK_DEFINITION | jq -r '.taskDefinition.taskDefinitionArn')

        echo "::set-output name=task-def-arn::$TASK_DEF_ARN"

    - name: Update ECS service
      run: |
        TASK_DEF_ARN=${{ steps.task-def.outputs.task-def-arn }}
        echo "Updating ECS service..."
        aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --task-definition $TASK_DEF_ARN

    - name: Post-deployment verification
      run: |
        echo "Verifying deployment..."
        aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_SERVICE

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ vars.BACKEND_TASK_DEFINITION }}
        container-name: ${{ vars.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ vars.BACKEND_TASK_DEFINITION }}
        cluster: ${{ vars.ECS_CLUSTER }}
        service: ${{ vars.ECS_SERVICE }}
        wait-for-service-stability: true